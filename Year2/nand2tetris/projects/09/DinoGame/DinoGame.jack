
class DinoGame {

    field Dino dino;
    field Cactus cactus;
    field Hawk hawk;
    field boolean gravity;
    field boolean jump;
    field int cactusXPos;
    field int dinoYPos;
    field int score;

    constructor DinoGame new() {
        do Screen.setColor(true);
        do Screen.drawRectangle(1, 230, 510, 232);
        let dino = Dino.new();
        let cactus = Cactus.new(50);
        // let hawk = Hawk.new(50);
        let jump = false;
        let gravity = false;
        let score = 9;
        return this;
    }

    method int run() {
        var char key;  // the key currently pressed by the user
        var boolean exit;
        var boolean didItPrintGameOver;
        var boolean shouldMoveLeft;

        let cactusXPos = 0;
        let dinoYPos = 0;
        let exit = false;
        let shouldMoveLeft = true;
        let didItPrintGameOver = false;
      
        while (~exit) {
            //  waits for a key to be pressed
            while (key = 0) {
                let key = Keyboard.keyPressed();
                if (shouldMoveLeft) {
                    do cactus.moveLeft();
                }
                do dino.jump(jump);
                do dino.gravity(gravity);
                let dinoYPos = dino.getYPos();
                let cactusXPos = cactus.getXPos();
                if (cactusXPos > 380) {
                    if (cactusXPos < 420) {
                        if (dinoYPos < 35) {
                            do cactus.erase();
                            do dino.dispose();
                            return score;
                        }
                    }
                }
                do Screen.setColor(false);
                do Screen.drawRectangle(1, 230, 510, 232);
                do Screen.setColor(true);
                do Screen.drawRectangle(1, 230, 510, 232);
                if (dinoYPos < 0) {
                    let jump = false;
                    let gravity = false;
                }

                if (dinoYPos > 80) {
                    let jump = false;
                    let gravity = true;
                }

                if (450 - cactusXPos < 10) {
                    do cactus.erase();
                    do cactus.setXPos(0);
                }

            }

            if (key = 81)  { let exit = true; }// q key
            if (~gravity) {
                if (key = 131) { let jump = true; }// up arrow
                if (key = 32) { let jump = true; }// space key
            }
            // waits for the key to be released
            while (~(key = 0)) {
                let key = Keyboard.keyPressed();                            
            }
        } // while
        return score;
    }

    method void dispose() {
      do Memory.deAlloc(this);
      return;
    }

}