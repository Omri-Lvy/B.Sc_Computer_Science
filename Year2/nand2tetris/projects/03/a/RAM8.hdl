// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM8.hdl

/**
 * Memory of 8 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM8 {
    IN in[16], load, address[3];
    OUT out[16];

    PARTS:
    // Set load=1 only to the relevant register address
    DMux8Way(in=load, sel=address, a=registerA, b=registerB, c=registerC, d=registerD, e=registerE, f=registerF, g=registerG, h=registerH);
    // Set values to internal registers
    Register(in=in, load=registerA, out=r1);
    Register(in=in, load=registerB, out=r2);
    Register(in=in, load=registerC, out=r3);
    Register(in=in, load=registerD, out=r4);
    Register(in=in, load=registerE, out=r5);
    Register(in=in, load=registerF, out=r6);
    Register(in=in, load=registerG, out=r7);
    Register(in=in, load=registerH, out=r8);
    // return the register in the given address
    Mux8Way16(a=r1, b=r2, c=r3, d=r4, e=r5, f=r6, g=r7, h=r8, sel=address, out=out);
}